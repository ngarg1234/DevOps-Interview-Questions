1. Using a separate file for user data
You can store your user data script in a separate file, such as user_data.sh, and then reference it in your Terraform script. 
This approach keeps the user data more maintainable and allows you to reuse the script across multiple instances.

terraform-project/
├── main.tf               # Main Terraform configuration file
├── variables.tf          # Variables file (if needed)
├── outputs.tf            # Output values (if needed)
├── user_data/            # Directory for user data scripts
│   └── user_data.sh      # Your user data script
├── terraform.tfvars      # Optional: Variable definitions (if needed)
├── providers.tf          # Provider configuration (if needed)
└── modules/    

Example:
Terraform Script (main.tf):

provider "aws" {
  region = "us-west-2"
}

resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"  # Replace with a valid AMI ID
  instance_type = "t2.micro"
  key_name      = "my-key-pair"  # Replace with your SSH key name
  subnet_id     = "subnet-xxxxxxx"  # Replace with your subnet ID

  user_data = file("user_data\user_data.sh")

  tags = {
    Name = "ExampleInstance"
  }
}

output "instance_ip" {
  value = aws_instance.example.public_ip
}

User Data Script (user_data.sh):
bash
Copy
#!/bin/bash
# Update the system and install Apache HTTP server
apt-get update -y
apt-get install -y apache2
systemctl start apache2
systemctl enable apache2
echo "Hello from Terraform!" > /var/www/html/index.html
Explanation:
file() function: The file() function reads the contents of an external file (in this case, user_data.sh) and passes it as the user_data value. This helps keep your Terraform configuration clean and the scripts modular.

Modular and Maintainable: By keeping the user data in a separate file, it becomes easier to edit and version control. If you have multiple EC2 instances with different configurations, you can reuse the same script or create different scripts for each.